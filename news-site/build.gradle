//buildscript {
//	repositories {
//		mavenCentral()
//	}
//
//	dependencies {
//		/* Any build script libraries go here */
//	}
//}

plugins {
	id 'java'
//	id 'net.ritzow'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.eclipse.jetty:jetty-server:11.0.7'
	implementation 'org.eclipse.jetty.http2:http2-server:11.0.7'
	implementation 'org.eclipse.jetty:jetty-alpn-java-server:11.0.7'
	implementation 'org.eclipse.jetty:jetty-jmx:11.0.7'
	
	implementation 'com.j2html:j2html:1.5.0'
	implementation 'org.commonmark:commonmark:0.18.0'
	implementation 'com.zaxxer:HikariCP:5.0.0'

	runtimeOnly 'org.hsqldb:hsqldb:2.6.1'
	runtimeOnly 'org.slf4j:slf4j-jdk-platform-logging:2.0.0-alpha5'
	runtimeOnly 'org.slf4j:slf4j-simple:2.0.0-alpha5'

	testImplementation 'org.mortbay.jetty.loadgenerator:jetty-load-generator-client:3.1.0'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

/* A reference to this build file */
def current = this

/* Put files directly into jar */
processResources.enabled false

/* Reproducible builds */
tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

compileJava {
	options.javaModuleMainClass.set('net.ritzow.news.RunSite')
	options.encoding 'UTF-8'
}

import java.nio.file.Files

def properties = new Properties()

try(def file = Files.newBufferedReader(projectDir.toPath().resolve('project.properties'))) {
	properties.load(file)
}

import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse
import java.nio.file.Path
import java.util.stream.Stream

task downloadFont {
	outputs.file layout.buildDirectory.file('OpenSans-Regular.ttf')
	outputs.upToDateWhen {
		outputs.files.singleFile.exists()
	}
	
	doLast {
		URI url = URI.create("https://raw.githubusercontent.com/google/fonts/main/apache/opensans/OpenSans%5Bwdth%2Cwght%5D.ttf")
		
		HttpClient.newHttpClient()
			.send(HttpRequest.newBuilder(url).GET().build(),
					HttpResponse.BodyHandlers.ofFile(outputs.files.singleFile.toPath())
			)
	}
}

def static isOutOfDate(Path inputPath, Path outputPath) {
	return Files.notExists(outputPath) ||
			Files.getLastModifiedTime(inputPath).toInstant()
				.isAfter(Files.getLastModifiedTime(outputPath).toInstant())
}

Path outputDir = sourceSets.main.output.resourcesDir.toPath()

task compileScss {
	Path inputCss = current.projectDir.toPath().resolve('src/main/css/global.scss')
	Path outputCss = outputDir.resolve('css/global.css')
	
	inputs.file inputCss.toFile()
	outputs.dir outputDir.toFile()
	outputs.file outputCss.toFile()
	outputs.cacheIf { true }
	
	outputs.upToDateWhen { !isOutOfDate(inputCss, outputCss) }
	
	doLast {
		outputs.files.files.forEach {
			file -> file.mkdir()
		}
		exec {
			executable properties.getProperty("sass.path")
			args '--no-source-map', inputCss, outputCss
			standardInput = System.in
			standardOutput = System.out
			errorOutput = System.err
		}.assertNormalExitValue()
	}
}

task compileIcon {
	Path inputIcon = current.projectDir.toPath().resolve("src/main/image/icon.svg")
	Path outputIcon = outputDir.resolve("image/icon.svg")

	outputs.file outputIcon.toFile()
	outputs.upToDateWhen { !isOutOfDate(inputIcon, outputIcon) }
	
	doLast {
		exec { /* TODO use scour to optimize svg files */
			executable properties.getProperty("inkscape.path")
			args '--export-filename=' + outputIcon, '--export-type=svg', '--export-plain-svg', inputIcon.toString()
			standardOutput = System.out
			errorOutput = System.err
		}.assertNormalExitValue()
	}
}

jar {
	dependsOn downloadFont, compileScss, compileIcon
	
	from('src/main') {
		include 'xml/**', 'lang/**'
	}

	from(layout.buildDirectory) {
		include 'OpenSans-Regular.ttf'
		into 'font'
	}
}

task bundle {
	group 'build'
	dependsOn jar
	
	outputs.dir layout.buildDirectory.asFile

	doLast {
		Stream.concat(
			Stream.of(current.jar.archiveFile.orNull.asFile),
			(Stream<File>)project.sourceSets.getByName("main").runtimeClasspath.files.stream().filter(File::isFile)
		).forEach { file -> project.logger.lifecycle '{}', file.toPath().getFileName() }
	}
}

def debugLevel = 'debug'

test {
	useJUnitPlatform()

	jvmArgs '-Dnet.ritzow.certs=' + properties.getProperty('keystore.file'),
			'-Dnet.ritzow.pass=' + properties.getProperty('keystore.password'),
			'-Dnet.ritzow.debug=true',
			'-Dorg.slf4j.simpleLogger.defaultLogLevel=' + debugLevel
}

tasks.create('run', JavaExec) {
	dependsOn jar

	mainModule.set('net.ritzow.news')

	defaultCharacterEncoding = 'UTF-8'

	/* Class-path/module-path from the main jar and the jar dependencies (excluding any folder dependencies) */
	classpath = project.objects.fileCollection().from(Stream.concat(
		Stream.of(current.jar.archiveFile.orNull.asFile),
		(Stream<File>)current.sourceSets.main.runtimeClasspath.files.stream().filter(File::isFile)
	).toList())

	jvmArgs '-Dnet.ritzow.certs=' + properties.getProperty('keystore.file'),
			'-Dnet.ritzow.pass=' + properties.getProperty('keystore.password'),
			'-Dnet.ritzow.debug=true',
			'-Dorg.slf4j.simpleLogger.defaultLogLevel=' + debugLevel,
			'-Dorg.slf4j.simpleLogger.log.org.eclipse.jetty=info',
			'-Dorg.slf4j.simpleLogger.log.com.zaxxer.hikari.pool.HikariPool=info',
			'-Xlog:all=warning:stderr'
}