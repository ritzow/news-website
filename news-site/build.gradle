
plugins {
	id 'application'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.eclipse.jetty:jetty-server:11.0.7'
	implementation 'com.j2html:j2html:1.5.0'
	implementation 'org.commonmark:commonmark:0.18.0'
	implementation 'com.zaxxer:HikariCP:5.0.0'
	implementation 'org.eclipse.jetty.http2:http2-server:11.0.7'
	implementation 'org.eclipse.jetty:jetty-alpn-java-server:11.0.7'
	implementation 'com.j2html:j2html:1.5.0'
	implementation 'org.eclipse.jetty:jetty-jmx:11.0.7'

	runtimeOnly 'org.hsqldb:hsqldb:2.6.1'
	runtimeOnly 'org.slf4j:slf4j-jdk-platform-logging:2.0.0-alpha5'
	runtimeOnly 'org.slf4j:slf4j-simple:2.0.0-alpha5'

	testImplementation 'org.mortbay.jetty.loadgenerator:jetty-load-generator-client:3.1.0'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

compileJava {
	options.javaModuleMainClass.set('net.ritzow.news.RunSite')
	options.encoding 'UTF-8'
}

import java.nio.file.Files
import java.nio.file.Path

def properties = new Properties()

try(def file = Files.newBufferedReader(projectDir.toPath().resolve('project.properties'))) {
	properties.load(file)
}

processResources {
	from('src/main') {
		include 'xml/**', 'lang/**', 'content/**', 'font/**'
	}
}

def static isOutOfDate(Path inputPath, Path outputPath) {
	return Files.notExists(outputPath) ||
			Files.getLastModifiedTime(inputPath).toInstant()
				.isAfter(Files.getLastModifiedTime(outputPath).toInstant())
}

jar {
	outputs.upToDateWhen { false }

	manifest.attributes('Main-Class': 'net.ritzow.news.RunSite')

	def outputDir = project.sourceSets.main.output.resourcesDir.toPath()

	doFirst {
		Path inputCss = project.projectDir.toPath().resolve('src/main/css/global.scss')
		Path outputCss = outputDir.resolve('css/global.css')
		mkdir outputDir
		if(isOutOfDate(inputCss, outputCss)) {
			exec {
				executable properties.getProperty("sass.path")
				args '--no-source-map', inputCss, outputCss
				standardInput = System.in
				standardOutput = System.out
				errorOutput = System.err
			}.assertNormalExitValue()
		}

		Path inputIcon = project.projectDir.toPath().resolve("src/main/image/icon.svg")
		Path outputIcon = outputDir.resolve("image/icon.svg")

		if(isOutOfDate(inputIcon, outputIcon)) {
			exec { /* TODO use scour to optimize svg files */
				executable properties.getProperty("inkscape.path")
				args '--export-filename=' + outputIcon, '--export-type=svg', '--export-plain-svg', inputIcon.toString()
				standardOutput = System.out
				errorOutput = System.err
			}.assertNormalExitValue()
		}
	}
}

def debugLevel = 'debug'

test {
	useJUnitPlatform()

	jvmArgs '-Dnet.ritzow.certs=' + properties.getProperty('keystore.file'),
			'-Dnet.ritzow.pass=' + properties.getProperty('keystore.password'),
			'-Dnet.ritzow.debug=true',
			'-Dorg.slf4j.simpleLogger.defaultLogLevel=' + debugLevel
}

run {
	mainClass.set('net.ritzow.news.RunSite')
	mainModule.set('net.ritzow.news')

	jvmArgs '-Dnet.ritzow.certs=' + properties.getProperty('keystore.file'),
			'-Dnet.ritzow.pass=' + properties.getProperty('keystore.password'),
			'-Dnet.ritzow.debug=true',
			'-Dorg.slf4j.simpleLogger.defaultLogLevel=' + debugLevel,
			'-Dorg.slf4j.simpleLogger.log.org.eclipse.jetty=info',
			'-Xlog:all=warning:stderr'
}